{"name":"Ftracer","tagline":"A toolkit for tracing C/C++ program","body":"ftracer\r\n======\r\n\r\nA toolkit for tracing C/C++ program(including multi-thread program), it can generate a call graph for you<br>\r\nSometimes you may hard to understand a complex program, especially a very big application. So you need a powerful tool to help you to dump the call graph.\r\n\r\n# Before you start\r\nPlease note that, the tracer works for you in the following scenarios:\r\n* You can touch the source code, and can easy to re-compile it in your environment\r\n* You need a time-line based call graph\r\n\r\n**If NOT, please leave.**\r\n\r\n# How to Use it\r\n## Check out\r\n```bash\r\ngit clone git@github.com:finaldie/ftracer.git\r\n```\r\n\r\n## Compile ftracer\r\n```bash\r\nmake\r\n```\r\n\r\n## Re-Compile your program\r\nTo make the tracer working, you should re-compile your application with `-g -finstrument-functions` flags\r\n```bash\r\nmake CFLAGS=\"-g -finstrument-functions\"\r\n```\r\n\r\n**NOTE:** you can try the example in ftracer\r\n\r\n## Generate Call Graph Report\r\n* PRELOAD ftracer.so in the wrapper script\r\n    ```bash\r\n    bash $ cat run.sh\r\n    #!/bin/sh\r\n    export LD_PRELOAD=/path/to/ftracer.so\r\n\r\n    ./yourapp\r\n    ```\r\n\r\n* Run it\r\n    ```bash\r\n    ./run.sh\r\n    ```\r\n\r\n* Generate the Report\r\n    ```bash\r\n    cd tools\r\n    ./gen_report.sh -e yourapp -f /tmp/trace.txt > report.txt\r\n    ```\r\n\r\n# Advanced\r\n## env variables\r\n* Start tracer when enter in your specific function address\r\n    ```\r\n    export FTRACER_FUNC_ENTRY=xxx  # xxx is the function address, like 0000123\r\n    ```\r\n\r\n* Start tracer when receive your specific signal\r\n    ```\r\n    export FTRACER_SIG_NUM=10 # 10 is SIGUSR1, kill -s SIGUSR1 PID to start tracer\r\n    ```\r\n\r\n* Specific a output tracer file\r\n    ```\r\n    export FTRACER_FILE=/tmp/your_tracer_file\r\n    ```\r\n\r\n**NOTE:** About signal and function address entrance two features, they can not enable in the same time, if that, the signal feature will not be take effect.\r\n\r\n## gen_report Options\r\nSometimes, we deal with C++ program, there are a lot of noise in there, like std,\r\nboost... so we should filter them out\r\n\r\n* `-s` Regex Symbol Filter\r\n\r\n    For this, you should use `-s` arg, for example:\r\n    ```\r\n    gen_report.sh -e app -f /tmp/trace.txt -s \"^std::\"\r\n    ```\r\n* `-S` Filter by file/path\r\n\r\n    For this, the `-S` arg will help you, for example if you want to filter all the c++ related information out, you should:\r\n    ```\r\n    gen_report.sh -e app -f /tmp/trace.txt -S /include/c++\r\n    ```\r\n* `-p` Keep at most N level of path\r\n\r\n    If a path is too long, it will be a noise for us, so the -p parameter will help to keep at most N level of path, for example, there is a path `/path/a/b/c/d.c`, use `-p 1` the path in the report will be `c/d.c`.<br>\r\n    If no `-p` or `-p` value is a negative number, this feature will be ignore\r\n\r\n* `-o` Specific output folder\r\n\r\n    The default output folder is `/tmp`, but if you want to specific another folder, \r\n    `-o output` will help you.\r\n\r\n* `-d` Don't cleanup the temporay data\r\n\r\n    If you get wrong data when you run `gen_report.sh`, the temporay data will help you to debug what's happened, so if you want to debug it, pass the `-d` paramter.\r\n\r\n* `-v` Show debug info\r\n\r\n    If you need more information during the report generating, you can pass `-v` in\r\n\r\n* `-t` Start N process to generate report\r\n\r\n    The addr2line is slow, sometimes you need to start N process to generate the report in parallel, it will reduce the generating time. For example `-t 4`\r\n\r\n* `-F` output format\r\n\r\n    Default output format is `plain`, and you also can specific `html` format, for example `-F html`, this will be great help when you are dealing with a very big call graph.\r\n\r\n# Enjoy and Analysis the Report\r\nFor now, open the `/tmp/trace_report.txt.threadid` and enjoy it. The example like:\r\n```c\r\n 1x main(/home/username/github/ftracer/example/test.c:44) - (called from ??:0)\r\n.. 3x a(/home/username/github/ftracer/example/test.c:36) - (called from test.c:45)\r\n.... 1x b(/home/username/github/ftracer/example/test.c:21) - (called from test.c:39)\r\n...... 1x c(/home/username/github/ftracer/example/test.c:16) - (called from test.c:25)\r\n.... 1x b(/home/username/github/ftracer/example/test.c:21) - (called from test.c:39)\r\n...... 2x d(/home/username/github/ftracer/example/test.c:11) - (called from test.c:27)\r\n...... 1x e(/home/username/github/ftracer/example/test.c:6) - (called from test.c:31)\r\n```\r\n\r\nMore detail see the [example][1]\r\n\r\n[1]: https://github.com/finaldie/ftracer/tree/master/example\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}